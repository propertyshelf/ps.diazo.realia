<?xml version="1.0" encoding="UTF-8"?>
<rules xmlns="http://namespaces.plone.org/diazo"
    xmlns:css="http://namespaces.plone.org/diazo/css"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xi="http://www.w3.org/2001/XInclude">

  <!-- Wrap develoment header caption in container and use bg image. -->
  <replace content="//section[contains(@class, 'development__header')]">
    <section class="development__header">
      <xsl:attribute name="style">background-image: url(<xsl:value-of select="img/@src" />);</xsl:attribute>
      <div class="header_caption">
        <div class="container">
          <div class="span12">
            <xsl:apply-templates select="div[@class='header_caption']/node()" />
          </div>
        </div>
      </div>
    </section>
  </replace>

  <!-- Adjust personal tools menu. -->
  <replace css:theme-children=".account .nav">
    <xsl:for-each css:select="ul#portal-personaltools li a">
      <li><xsl:copy-of select="." /></li>
    </xsl:for-each>
    <xsl:for-each css:select="dl#portal-personaltools">
      <li><xsl:copy-of select="." /></li>
    </xsl:for-each>
  </replace>

  <!-- Transform input submits into Bootstrap buttons. -->
  <replace content="//input[@type[contains(., 'submit') or contains(., 'button')]]">
    <input>
      <xsl:copy-of select="attribute::*[not(name()='class')]" />
      <xsl:attribute name="class"><xsl:value-of select="@class" /> btn
        <xsl:choose>
          <xsl:when test="@name[contains(., 'delete')]">btn-danger</xsl:when>
          <xsl:when test="@class[contains(., 'destructive')]">btn-danger</xsl:when>
          <xsl:when test="@class[contains(., 'standalone')]">btn-info arrow-right</xsl:when>
          <xsl:when test="@class[contains(., 'context')]">btn-primary arrow-right</xsl:when>
          <xsl:otherwise>btn-inverse</xsl:otherwise>
        </xsl:choose>
      </xsl:attribute>
      <xsl:apply-templates />
    </input>
  </replace>

  <!-- Transform buttons into Bootstrap buttons. -->
  <replace content="//button[@type[contains(., 'submit') or contains(., 'button')]]">
    <button>
      <xsl:copy-of select="attribute::*[not(name()='class')]" />
      <xsl:attribute name="class"><xsl:value-of select="@class" /> btn
        <xsl:choose>
          <xsl:when test="@name[contains(., 'delete')]">btn-danger</xsl:when>
          <xsl:when test="@class[contains(., 'destructive')]">btn-danger</xsl:when>
          <xsl:when test="@class[contains(., 'standalone')]">btn-info arrow-right</xsl:when>
          <xsl:when test="@class[contains(., 'context')]">btn-primary arrow-right</xsl:when>
          <xsl:otherwise>btn-inverse</xsl:otherwise>
        </xsl:choose>
      </xsl:attribute>
      <xsl:apply-templates />
    </button>
  </replace>

  <!-- Transform list of developments into realia property rows. -->
  <replace css:content=".development-collection-tile, .development-summary">
    <div>
      <xsl:copy-of select="attribute::*[not(name()='class')]" />
      <xsl:attribute name="class"><xsl:value-of select="@class" /> properties-rows</xsl:attribute>
      <div class="row-fluid">
        <xsl:for-each select="div">
          <xsl:choose>
            <xsl:when test="@class[contains(.,'tileItem')]">
              <div class="property span12">
                <xsl:if css:test="figure.banner">
                  <div class="row-fluid">
                    <div class="span12">
                      <a class="banner" href="detail.html">
                        <xsl:copy-of select="figure[@class[contains(., 'banner')]]/a/attribute::*[not(name()='href')]" />
                        <xsl:attribute name="style">background-image: url(<xsl:value-of select="figure[@class[contains(., 'banner')]]/a/img/@src" />);</xsl:attribute>
                        <xsl:attribute name="href"><xsl:value-of select="figure[@class[contains(., 'banner')]]/a/@href" /></xsl:attribute>
                      </a>
                    </div>
                  </div>
                </xsl:if>
                <div class="row-fluid">
                  <div class="image span4">
                    <div class="content">
                      <xsl:if css:test="figure.logo">
                        <a href="detail.html">
                          <xsl:copy-of select="figure[@class[contains(., 'logo')]]/a/attribute::*[not(name()='href')]" />
                          <xsl:attribute name="href"><xsl:value-of select="figure[@class[contains(., 'logo')]]/a/@href" /></xsl:attribute>
                        </a>
                        <xsl:apply-templates select="figure[@class[contains(., 'logo')]]/a/img" />
                      </xsl:if>
                      <xsl:if test="figure[not(@class)]">
                        <a href="detail.html">
                          <xsl:copy-of select="figure[not(@class)]/a/attribute::*[not(name()='href')]" />
                          <xsl:attribute name="href"><xsl:value-of select="figure[not(@class)]/a/@href" /></xsl:attribute>
                        </a>
                        <xsl:apply-templates select="figure[not(@class)]/a/img" />
                      </xsl:if>
                    </div>
                  </div>

                  <div class="body span8">
                    <div class="title-price">
                      <div class="title">
                        <xsl:apply-templates select="h2" />
                      </div>
                    </div>

                    <div class="location">
                      <xsl:value-of css:select=".location .item-body, dd.location" />
                    </div>
                    <p>
                      <xsl:value-of css:select=".description, p" />
                    </p>

                    <xsl:if css:test=".location_type">
                      <div class="location_type">
                        <xsl:attribute name="title"><xsl:value-of css:select=".location_type .item-heading, dt.location_type" /></xsl:attribute>
                        <span class="key"><xsl:value-of css:select=".location_type .item-heading, dt.location_type" /></span>
                        <span class="value"><xsl:value-of css:select=".location_type .item-body, dd.location_type" /></span>
                      </div>
                    </xsl:if>

                    <xsl:if css:test=".number_of_listings">
                      <div class="number_of_listings">
                        <xsl:attribute name="title"><xsl:value-of css:select=".number_of_listings .item-heading, dt.number_of_listings" /></xsl:attribute>
                        <span class="key"><xsl:value-of css:select=".number_of_listings .item-heading, dt.number_of_listings" /></span>
                        <span class="value"><xsl:value-of css:select=".number_of_listings .item-body, dd.number_of_listings" /></span>
                      </div>
                    </xsl:if>

                    <xsl:if css:test=".number_of_groups">
                      <div class="number_of_groups">
                        <xsl:attribute name="title"><xsl:value-of css:select=".number_of_groups .item-heading, dt.number_of_groups" /></xsl:attribute>
                        <span class="key"><xsl:value-of css:select=".number_of_groups .item-heading, dt.number_of_groups" /></span>
                        <span class="value"><xsl:value-of css:select=".number_of_groups .item-body, dd.number_of_groups" /></span>
                      </div>
                    </xsl:if>
                  </div>
                </div>
              </div>
            </xsl:when>
            <xsl:otherwise>
              <xsl:apply-templates select="." />
            </xsl:otherwise>
          </xsl:choose>
        </xsl:for-each>
      </div>
    </div>
  </replace>

</rules>
